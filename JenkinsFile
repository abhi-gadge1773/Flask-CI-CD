pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'flaskappcicd'
        CONTAINER_NAME = 'flaskc1'
        PYTEST_PATH = 'pytest'
    }

    stages {
        stage('System Setup') {
            steps {
                sh '''
                echo "=== Updating system ==="
                sudo apt-get update -y

                echo "=== Installing Python3, pip and pytest ==="
                sudo apt-get install python3 python3-pip python3-pytest -y

                echo "=== Installing Docker ==="
                sudo apt-get install \
                    ca-certificates \
                    curl \
                    gnupg \
                    lsb-release -y

                sudo mkdir -p /etc/apt/keyrings

                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
                  sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

                echo \
                  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
                  https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
                  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

                sudo apt-get update
                sudo apt-get install docker-ce docker-ce-cli containerd.io -y

                echo "=== Adding Jenkins to docker group ==="
                sudo usermod -aG docker jenkins
                sudo systemctl restart docker
                '''
            }
        }

        stage('Clone Repo') {
            steps {
                git branch: 'main', url: 'https://github.com/piyushbankhede/Flask-CICD.git'
            }
        }

        stage('Run Tests') {
            steps {
                sh '''
                echo "=== Running pytest ==="
                ${PYTEST_PATH}
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                echo "=== Building Docker image ==="
                docker build -t ${DOCKER_IMAGE} .
                '''
            }
        }

        stage('Run Container') {
            steps {
                sh '''
                echo "=== Stopping and removing old container if exists ==="
                docker stop ${CONTAINER_NAME} || true
                docker rm ${CONTAINER_NAME} || true

                echo "=== Running new container ==="
                docker run -itd -p 5000:5000 --name ${CONTAINER_NAME} ${DOCKER_IMAGE}
                '''
            }
        }

        stage('Cleanup') {
            steps {
                sh '''
                echo "=== Cleaning up unused Docker resources ==="
                docker container prune -f
                docker image prune -f
                '''
            }
        }
    }

    post {
        success {
            echo '✅ CI/CD pipeline completed successfully!'
        }
        failure {
            echo '❌ Pipeline failed!'
        }
    }
}
